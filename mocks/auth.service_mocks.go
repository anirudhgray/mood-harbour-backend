// Code generated by MockGen. DO NOT EDIT.
// Source: services/auth.service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/anirudhgray/mood-harbour-backend/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthServiceInterface is a mock of AuthServiceInterface interface.
type MockAuthServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceInterfaceMockRecorder
}

// MockAuthServiceInterfaceMockRecorder is the mock recorder for MockAuthServiceInterface.
type MockAuthServiceInterfaceMockRecorder struct {
	mock *MockAuthServiceInterface
}

// NewMockAuthServiceInterface creates a new mock instance.
func NewMockAuthServiceInterface(ctrl *gomock.Controller) *MockAuthServiceInterface {
	mock := &MockAuthServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAuthServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceInterface) EXPECT() *MockAuthServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteAccount mocks base method.
func (m *MockAuthServiceInterface) DeleteAccount(email, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", email, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockAuthServiceInterfaceMockRecorder) DeleteAccount(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAuthServiceInterface)(nil).DeleteAccount), email, otp)
}

// ForgotPasswordRequest mocks base method.
func (m *MockAuthServiceInterface) ForgotPasswordRequest(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordRequest", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPasswordRequest indicates an expected call of ForgotPasswordRequest.
func (mr *MockAuthServiceInterfaceMockRecorder) ForgotPasswordRequest(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordRequest", reflect.TypeOf((*MockAuthServiceInterface)(nil).ForgotPasswordRequest), email)
}

// LoginUser mocks base method.
func (m *MockAuthServiceInterface) LoginUser(email, password string) (string, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockAuthServiceInterfaceMockRecorder) LoginUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockAuthServiceInterface)(nil).LoginUser), email, password)
}

// RegisterUser mocks base method.
func (m *MockAuthServiceInterface) RegisterUser(email, name, profileImage, password string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", email, name, profileImage, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthServiceInterfaceMockRecorder) RegisterUser(email, name, profileImage, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthServiceInterface)(nil).RegisterUser), email, name, profileImage, password)
}

// RequestDeletion mocks base method.
func (m *MockAuthServiceInterface) RequestDeletion(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestDeletion", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestDeletion indicates an expected call of RequestDeletion.
func (mr *MockAuthServiceInterfaceMockRecorder) RequestDeletion(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestDeletion", reflect.TypeOf((*MockAuthServiceInterface)(nil).RequestDeletion), user)
}

// RequestVerificationAgain mocks base method.
func (m *MockAuthServiceInterface) RequestVerificationAgain(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVerificationAgain", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestVerificationAgain indicates an expected call of RequestVerificationAgain.
func (mr *MockAuthServiceInterfaceMockRecorder) RequestVerificationAgain(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVerificationAgain", reflect.TypeOf((*MockAuthServiceInterface)(nil).RequestVerificationAgain), email)
}

// ResetPassword mocks base method.
func (m *MockAuthServiceInterface) ResetPassword(user models.User, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", user, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockAuthServiceInterfaceMockRecorder) ResetPassword(user, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockAuthServiceInterface)(nil).ResetPassword), user, oldPassword, newPassword)
}

// SetNewPassword mocks base method.
func (m *MockAuthServiceInterface) SetNewPassword(email, otp, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewPassword", email, otp, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewPassword indicates an expected call of SetNewPassword.
func (mr *MockAuthServiceInterfaceMockRecorder) SetNewPassword(email, otp, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewPassword", reflect.TypeOf((*MockAuthServiceInterface)(nil).SetNewPassword), email, otp, newPassword)
}

// VerifyEmail mocks base method.
func (m *MockAuthServiceInterface) VerifyEmail(email, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", email, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockAuthServiceInterfaceMockRecorder) VerifyEmail(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockAuthServiceInterface)(nil).VerifyEmail), email, otp)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: repository/mood.repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/anirudhgray/mood-harbour-backend/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMoodRepositoryInterface is a mock of MoodRepositoryInterface interface.
type MockMoodRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMoodRepositoryInterfaceMockRecorder
}

// MockMoodRepositoryInterfaceMockRecorder is the mock recorder for MockMoodRepositoryInterface.
type MockMoodRepositoryInterfaceMockRecorder struct {
	mock *MockMoodRepositoryInterface
}

// NewMockMoodRepositoryInterface creates a new mock instance.
func NewMockMoodRepositoryInterface(ctrl *gomock.Controller) *MockMoodRepositoryInterface {
	mock := &MockMoodRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockMoodRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoodRepositoryInterface) EXPECT() *MockMoodRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateMoodAttributeEntry mocks base method.
func (m *MockMoodRepositoryInterface) CreateMoodAttributeEntry(moodAttribute *models.MoodAttribute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoodAttributeEntry", moodAttribute)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMoodAttributeEntry indicates an expected call of CreateMoodAttributeEntry.
func (mr *MockMoodRepositoryInterfaceMockRecorder) CreateMoodAttributeEntry(moodAttribute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoodAttributeEntry", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).CreateMoodAttributeEntry), moodAttribute)
}

// CreateMoodEntry mocks base method.
func (m *MockMoodRepositoryInterface) CreateMoodEntry(mood *models.Mood) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMoodEntry", mood)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMoodEntry indicates an expected call of CreateMoodEntry.
func (mr *MockMoodRepositoryInterfaceMockRecorder) CreateMoodEntry(mood interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMoodEntry", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).CreateMoodEntry), mood)
}

// CreateNewAttribute mocks base method.
func (m *MockMoodRepositoryInterface) CreateNewAttribute(attribute *models.Attribute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewAttribute", attribute)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewAttribute indicates an expected call of CreateNewAttribute.
func (mr *MockMoodRepositoryInterfaceMockRecorder) CreateNewAttribute(attribute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewAttribute", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).CreateNewAttribute), attribute)
}

// DeleteMood mocks base method.
func (m *MockMoodRepositoryInterface) DeleteMood(moodID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMood", moodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMood indicates an expected call of DeleteMood.
func (mr *MockMoodRepositoryInterfaceMockRecorder) DeleteMood(moodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMood", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).DeleteMood), moodID)
}

// DeleteMoodAttributeByMoodID mocks base method.
func (m *MockMoodRepositoryInterface) DeleteMoodAttributeByMoodID(moodID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMoodAttributeByMoodID", moodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMoodAttributeByMoodID indicates an expected call of DeleteMoodAttributeByMoodID.
func (mr *MockMoodRepositoryInterfaceMockRecorder) DeleteMoodAttributeByMoodID(moodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMoodAttributeByMoodID", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).DeleteMoodAttributeByMoodID), moodID)
}

// GetAttributeByID mocks base method.
func (m *MockMoodRepositoryInterface) GetAttributeByID(attributeID uint) (models.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeByID", attributeID)
	ret0, _ := ret[0].(models.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeByID indicates an expected call of GetAttributeByID.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetAttributeByID(attributeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeByID", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetAttributeByID), attributeID)
}

// GetMoodAttributesByMoodID mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodAttributesByMoodID(moodID uint) ([]models.MoodAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodAttributesByMoodID", moodID)
	ret0, _ := ret[0].([]models.MoodAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodAttributesByMoodID indicates an expected call of GetMoodAttributesByMoodID.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodAttributesByMoodID(moodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodAttributesByMoodID", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodAttributesByMoodID), moodID)
}

// GetMoodByID mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodByID(moodID uint) (models.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodByID", moodID)
	ret0, _ := ret[0].(models.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodByID indicates an expected call of GetMoodByID.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodByID(moodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodByID", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodByID), moodID)
}

// GetMoodsByUserID mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodsByUserID(userID uint) ([]models.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodsByUserID", userID)
	ret0, _ := ret[0].([]models.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodsByUserID indicates an expected call of GetMoodsByUserID.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodsByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodsByUserID", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodsByUserID), userID)
}

// GetMoodsByUserIDAndDateRange mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodsByUserIDAndDateRange(userID uint, startDate, endDate string) ([]models.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodsByUserIDAndDateRange", userID, startDate, endDate)
	ret0, _ := ret[0].([]models.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodsByUserIDAndDateRange indicates an expected call of GetMoodsByUserIDAndDateRange.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodsByUserIDAndDateRange(userID, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodsByUserIDAndDateRange", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodsByUserIDAndDateRange), userID, startDate, endDate)
}

// GetMoodsByUserIDAndMoodType mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodsByUserIDAndMoodType(userID uint, moodType models.MoodType) ([]models.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodsByUserIDAndMoodType", userID, moodType)
	ret0, _ := ret[0].([]models.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodsByUserIDAndMoodType indicates an expected call of GetMoodsByUserIDAndMoodType.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodsByUserIDAndMoodType(userID, moodType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodsByUserIDAndMoodType", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodsByUserIDAndMoodType), userID, moodType)
}

// GetMoodsByUserIDAndMoodTypeAndDateRange mocks base method.
func (m *MockMoodRepositoryInterface) GetMoodsByUserIDAndMoodTypeAndDateRange(userID uint, moodType models.MoodType, startDate, endDate string) ([]models.Mood, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoodsByUserIDAndMoodTypeAndDateRange", userID, moodType, startDate, endDate)
	ret0, _ := ret[0].([]models.Mood)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoodsByUserIDAndMoodTypeAndDateRange indicates an expected call of GetMoodsByUserIDAndMoodTypeAndDateRange.
func (mr *MockMoodRepositoryInterfaceMockRecorder) GetMoodsByUserIDAndMoodTypeAndDateRange(userID, moodType, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoodsByUserIDAndMoodTypeAndDateRange", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).GetMoodsByUserIDAndMoodTypeAndDateRange), userID, moodType, startDate, endDate)
}

// UpdateMoodEntry mocks base method.
func (m *MockMoodRepositoryInterface) UpdateMoodEntry(mood *models.Mood) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMoodEntry", mood)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMoodEntry indicates an expected call of UpdateMoodEntry.
func (mr *MockMoodRepositoryInterfaceMockRecorder) UpdateMoodEntry(mood interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMoodEntry", reflect.TypeOf((*MockMoodRepositoryInterface)(nil).UpdateMoodEntry), mood)
}
